1.write a python program  to check if a number is positive,negative or zero.

num = float(input("Enter a number: "))
if num > 0:
   print("Positive number")
elif num == 0:
   print("Zero")
else:
   print("Negative number")


2.write a python program to get the factorial number of given number.
  # Python program to find the factorial of a number provided by the user.

# change the value for a different result
num = 7

# To take input from the user
#num = int(input("Enter a number: "))

factorial = 1

# check if the number is negative, positive or zero
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)


3.Write a Python program to get the Fibonacci series of given range.
  # Program to display the Fibonacci sequence up to n-th term

nterms = int(input("How many terms? "))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print("Please enter a positive integer")
# if there is only one term, return n1
elif nterms == 1:
   print("Fibonacci sequence upto",nterms,":")
   print(n1)
# generate fibonacci sequence
else:
   print("Fibonacci sequence:")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1

4.How memory is managed in Python?
  Python uses the dynamic memory allocation which is managed by the Heap data structure.

5.What is the purpose continue statement in python?
  The continue keyword is used to end the current iteration in a for loop (or a while loop), and continues to the next iteration.

6.Write python program that swap two number with temp variable and without temp variable.
   # Python program to swap two variables

x = 5
y = 10

# To take inputs from the user
#x = input('Enter value of x: ')
#y = input('Enter value of y: ')

# create a temporary variable and swap the values
temp = x
x = y
y = temp

print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))

7.Write a Python program to find whether a given number is even or odd, print out an appropriate message to the user
  num = int (input (“Enter any number to test whether it is odd or even: “) if (num % 2) == 0: print (“The number is even")else:print(“The provided number is odd”)

8.Write a Python program to test whether a passed letter is a vowel or not.
  def fun(str):
    vowel = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']

    if str in vowel:

        print ("It is a vowel")
    else:
        print ("it is not vowel")

fun('a')
fun('O')

9.Write a Python program to sum of three given integers. However, if two values are equal sum will be zero.
  def sum_three(x, y, z):
    if x == y or y == z or x==z:
        sum = 0
    else:
        sum = x + y + z
    return sum
print(sum_three(2, 1, 2))
print(sum_three(3, 2, 2))
print(sum_three(2, 2, 2))
print(sum_three(1, 2, 3))

10. Write a Python program that will return true if the two given integer values are equal or their sum or difference is 5.
      def test_number5(x, y):
   if x == y or abs(x-y) == 5 or (x+y) == 5:
       return True
   else:
       return False
print(test_number5(7, 2))
print(test_number5(3, 2))
print(test_number5(2, 2))
print(test_number5(7, 3))
print(test_number5(27, 53))

11.Write a python program to sum of the first n positive integers.
    num = int(input("Input a number: "))
    sum_num = (num * (num + 1)) / 2.
    print(sum_num)

12.Write a Python program to calculate the length of a string.
  # User inputs the string and it gets stored in variable str
str = input("Enter a string: ")

# counter variable to count the character in a string
counter = 0
for s in str:
      counter = counter+1
print("Length of the input string is:", counter)

13.Write a Python program to count the number of characters (character frequency) in a string

   def char_frequency(str1):
    dict = {}
    for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
    return dict
print(char_frequency('google.com'))

14.What are negative indexes and why are they used?
   Negative Indexing is used to in Python to begin slicing from the end of the string i.e. the last. Slicing in Python gets a sub-string from a string. The slicing range is set as parameters i.e. start, stop and step

15.Write a Python program to count occurrences of a substring in a string.
   
     str1 = 'The quick brown fox jumps over the lazy dog.'
  print()
  print(str1.count("fox"))
  print()

16.Write a Python program to count the occurrences of each word in a given sentence

   def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    return counts

print( word_count('the quick brown fox jumps over the lazy dog.'))

17. Write a Python program to get a single string from two given strings,separated by a space and swap the first two characters of each string

    str1 = input ( "Please Enter First String : " ) str2 = input ( "Please Enter Second String : " )
#swap first two characters of given string.
x = str2[: 2 ] + str1[ 2 :] y = str1[: 2 ] + str2[ 2 :]
#print result.
print ( "Your first has become :- " ,x) print ( "Your second has become :- " ,y)

18.Write a Python program to add 'ing' at the end of a given string (length should be at least 3). If the given string already ends with 'ing' then add'ly' instead if the string length of the given string is less than 3, leave itunchanged.

   def add_string(str1):
  length = len(str1)

  if length > 2:
    if str1[-3:] == 'ing':
      str1 += 'ly'
    else:
      str1 += 'ing'

  return str1
print(add_string('ab'))
print(add_string('abc'))
print(add_string('string'))

19.Write a Python program to find the first appearance of the substring'not' and 'poor' from a given string, if 'not' follows the 'poor', replace thewhole 'not'...'poor' substring with 'good'. Return the resulting string.

   def not_poor(str1):
  snot = str1.find('not')
  spoor = str1.find('poor')
  

  if spoor > snot and snot>0 and spoor>0:
    str1 = str1.replace(str1[snot:(spoor+4)], 'good')
    return str1
  else:
    return str1
print(not_poor('The lyrics is not that poor!'))
print(not_poor('The lyrics is poor!'))

20.Write a Python function that takes a list of words and returns the length of the longest one.

  def find_longest_word(words_list):
    word_len = []
    for n in words_list:
        word_len.append((len(n), n))
    word_len.sort()
    return word_len[-1][0], word_len[-1][1]
result = find_longest_word(["PHP", "Exercises", "Backend"])
print("\nLongest word: ",result[1])
print("Length of the longest word: ",result[0])

21.ite a Python function to reverses a string if its length is a multiple of 4

  def reverse_string(str1):
    if len(str1) % 4 == 0:
       return ''.join(reversed(str1))
    return str1

print(reverse_string('abcd'))
print(reverse_string('python'))

22.Write a Python program to get a string made of the first 2 and the last 2 chars from a given a string. If the string length is less than 2, return instead of the empty string.

   def string_both_ends(str):
  if len(str) < 2:
    return ''

  return str[0:2] + str[-2:]

print(string_both_ends('w3resource'))
print(string_both_ends('w3'))
print(string_both_ends('w'))


23. Write a Python function to insert a string in the middle of a string.

   def insert_sting_middle(str, word):
	return str[:2] + word + str[2:]

print(insert_sting_middle('[[]]', 'Python'))
print(insert_sting_middle('{{}}', 'PHP'))
print(insert_sting_middle('<<>>', 'HTML'))











